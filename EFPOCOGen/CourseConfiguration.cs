// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace EFPOCOGen
{

    // Course
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public partial class CourseConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Course>
    {
        public CourseConfiguration()
            : this("dbo")
        {
        }
 
        public CourseConfiguration(string schema)
        {
            ToTable(schema + ".Course");
            HasKey(x => x.CourseId);

            Property(x => x.CourseId).HasColumnName(@"CourseID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Credits).HasColumnName(@"Credits").IsOptional().HasColumnType("int");
            Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").IsRequired().HasColumnType("int");
            Property(x => x.CreatedOn).HasColumnName(@"CreatedOn").IsRequired().HasColumnType("datetime");
            Property(x => x.ModifiedOn).HasColumnName(@"ModifiedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.CourseType).HasColumnName(@"CourseType").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Department).WithMany(b => b.Courses).HasForeignKey(c => c.DepartmentId); // FK_dbo.Course_dbo.Department_DepartmentID
            HasMany(t => t.People).WithMany(t => t.Courses).Map(m => 
            {
                m.ToTable("CourseInstructor", "dbo");
                m.MapLeftKey("CourseID");
                m.MapRightKey("InstructorID");
            });
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
